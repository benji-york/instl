topic:
    command:
        short: help about instl commands
        long: |
            such as sync, copy, synccopy, ls, etc...
            run 'instl help command' for a list of all instl's commands

    variable:
        short: help about instl configuration variables (not fully implemented)
        long: |
            help information for varaibale is incomplete
            run 'instl help variable' for a list of variables that have help information

    option:
        short: help about an instl command line options
        long: |
            help information for varaibale is incomplete
            such as --in, --out, --config-file, ls, etc...
            run 'instl help option' for a list of all instl's options

    pybatch:
        short: help about python batch classes
        long: |
            such as CopyDirToDir, RmFileOrDir, Ls, etc...
            run 'instl help pybatch' for a list of all python batch classes

    defaults:
        short: help about default values of  configuration variables
        long: |
            mmm mmm mmm

    topic:
        short: help about one of the above help topics
        long: |
            such as command, variable, pybatch, etc...
            run 'instl help topic' for a list of all instl help topics

command:
    check-checksum:
        short: Check synced files against their expected sha1 checksum (utility command)
        long: |
            Usage: instl check-checksum --in path-to-input-file [--start-progress start-progress-number] [--total-progress total-progress-number]
            check-checksum will calculate the sha1 checksum of each file listed in path-to-input-file and compare this checksum against the expected checksum listed in path-to-input-file.
            path-to-input-file should be a path to a file in info_map.txt format containing a list of the files to check. All file paths listed in path-to-input-file are relative to the current directory.
            A list of non matching or missing files is printed at the end.
            Non zero exit code is returned if any file in path-to-input-file is missing or has non matching checksum.
            check-checksum command is used in the batch created by the sync or synccopy commands and path-to-input-file would be bookkeeping/to_sync_info_map.txt.
            If --start-progress and --total-progress options are given, check-checksum will output progress messages starting with the number given in --start-progress with a total given in total-progress. Progress message for action N would be:
            Progress start-progress-number+N of total-progress;

    checksum:
        short: calculate sha1 checksum for a file or files in a folder (utility command)
        long: |
            Usage: instl checksum --in path_to_file_or_folder_to_checksum
            checksum command just calculates the file(s)'s checksum, it does not check against any given checksum as or check-checksum command does.
            checksum is a utility command, it is not needed for creating or using instl-based installer.

    copy:
        short: Install files to their destination (client command)
        long: |
            Usage: instl copy --in instl-config-yaml-file --out copy.sh [--run]
            instl's copy command will create a batch file containing instructions to copy files to their designated locations on disk. Said files were previously downloaded using the sync command. Definition of what to copy to which destination is taken from the instl-config-yaml-file.
            Keep in mind that copy command does not actually copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually install the files.

    depend:
        short: Create a full dependencies list from index.yaml (admin command)
        long: |
            Usage instl depend --in index-file --out depend-file
            Reads the given index-file and for each IID prints to depend-file all the IID it depends on and all IID needed by it.
            To print to standard out specify --out stdout

    fail:
        short: Fail on purpose and return an exit code (utility command)
        long: |
            Usage: instl fail [--exit-code a_number]
            The fail command is used to simulate a situation where instl fail and returns an exit code (ERRORLEVEL on windows).
            If --exit-code is given that number is use as exit code, otherwise default exit code is 1.

    fix-perm:
        short: Fix unix style permissions (admin command)
        long: |
            Usage: instl fix-perm --config-file path_to_config_file --out path-to-output-file [--limit sub-folder, [sub-folder]] [--run]
            Fixes unix style permisions in the stage folder (variable STAGING_FOLDER) (or in subset thereof if --limit option is suplied). First, files that match the regex in variable EXEC_PROP_REGEX are made executbles (chmod a+x), all other files are made non-executbale (chmod a-x). Second, all file and folders are made read/write and the executable bit (if any) is extended for all files and folders, by running the command 'chmod a+rw,+X'. This command should be used before the wtar command so that files and folders being wtarred will have the correct permisions.
            fix-perm will output a list of files who's executable bit is about to change. Be sure to go over the list and check that the proposed changes are acceptable before running the batch file.
            Keep in mind that fix-perm command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually fix the permissions.

    fix-props:
        short: Fix certain properties in svn repository (admin command)
        long: |
            Usage: instl fix-props --out path-to-output-file --config-file path-to-config-file [--run]
            Removes or adds svn:executable property where appropriate and removes all other properties. Files are assumed to be executables if their path matchs the regexs specified in variable EXEC_PROP_REGEX. The path to SVN repository is taken from the SVN_CHECKOUT_FOLDER variable.
            Keep in mind that fix-props command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually fix the properties. Also, running the batch file does not commit the properties changes, this should be manually done, after proper inspection, with an SVM client software.

    fix-symlinks:
        short: Replace symlinks with .symlink files (admin command)
        long: |
            Usage:instl fix-symlinks  --config-file path_to_config_file --out path-to-output-file [--run]
            Since s3 cannot deal with symlinks, symlinks should not be committed to svn. Instead the fix-symlinks command will replace each symlinks with file with the same name and the extension .symlink. The .symlink file will contain the relative path of the symlink.
            The folder where symlinks will be fixed is specifies in STAGING_FOLDER variable in path_to_config_file.
            Keep in mind that fix-symlinks command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually fix the symlinks.

    help:
        short: display help text about command, variable or command line option
        long: |
            Usage:
                instl help <variable>
                instl help <command>
                instl help <option>
                instl help defaults

    ls:
        short: create a listing of a directory (utility command)
        long: |
            Usage: instl ls --in path-to-input-folder --out path-to-output-file [--limit limit-command-to [limit-command-to ...]] [--output_format format]
            Creates a listing of a path-to-input-folder and writes it to path-to-output-file in the format:
            if output_format is ommited all fields are shown by default in the following order -
              indode   permissions  * user group     size modification-time   checksum (for files)                     full-path
              76307926 -rw-r--r--   1 dany staff     1045 2016/05/19-21:19:24 269d13fab3baf56de091457082ea3e04cc113267 /Volumes/Release/Plugins/API-2500.bundle/Contents/Info.plist
            --output_format can be any combination and order of these letters:
              for Mac: IRLUGSTCP - Inode, peRmissions, num Links, User, Group, Size, Time, Checksum, Path
              for Windows: TDSUGCP - Time, is_Dir, Size, User, Group, Checksum, Path
              Additional options:
                E (Extra info) depends on object, @/*=| will be append
                W (.Wtar content) will list .wtar content
                * (default): Mac - IRLUGSTCPE, Windows - TDSUGCP
            If --limit is supplied only these subfolder will be listed.
            *==number of links.

    parallel-run:
        short: Run processes in parallel (utility command)
        long: |
            Usage: instl parallel-run --in list-of-processes-to-run
            parallel-run will read the list-of-processes-to-run file and will launch a process running the command in each line . It will return when all processes have finished or when any process returns non zero value.
            parallel-run command is used in the batch file created by the sync or synccopy commands.

    remove:
        short: Remove installed files and all their dependencies (client command)
        long: |
            Usage: instl remove --in instl-config-yaml-file --out remove.sh [--run]
            instl's remove command will create a batch file containing instructions to remove files from their designated locations on disk. Said files were previously copied using the copy command. Definition of what items to remove from which destination is taken from the instl-config-yaml-file. Default remove action for installed item is to erase the files from disk, but other instructions can be given in the instl-config-yaml-file. All items and their dependecies are removed without considering if other items might depend on the removed items.
            Keep in mind that remove command does not actually copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually remove the files.

    report-versions:
        short: Report all IIDs with their guids, installed version and latest version form index (client command)
        long: |
            Usage: instl report-versions --in instl-config-yaml-file [--out output-file] [--only-installed] [--output-format text|json]
            instl's report-versions will read index.yaml and local require.yaml (if any) and will list for each IID (IID, guis, name, installed-version, index-version). Input file must contain __include__ statemets for the index.yaml and require.yaml.
            Output is written to stdout unless --out is given.
            Output is in plain text unless --output-format option is given with either text or json.
            If --only-installed option is given only IIDs already installed will be listed.

    resolve:
        short: Read text from stdin, resolve $() style variables and print result to stdout (utility command)
        long: |
            Usage: instl resolve --in yaml-with-variable-definitions [< input-file] [> output-file]
            resolve command will read variable definiiotns from !define section in yaml-with-variable-definitions file.
            Text from stdin will be resolved using the variable definitions and printed to stdout.

    run-process:
        short: Run single processes with optional abort file (utility command)
        long: |
            Usage: instl run-process [--abort-file path-to-abort-file] executable-to-run [args ...]
            run-process will launch a single process with the supplied arguments.
            if --abort-file is given, run-process will watch that the file exists and if not will kill the process,

    stage2svn:
        short: Update svn from a staging folder (admin command)
        long: |
           Usage: instl stage2svn --config-file  path-to-config-file --out stage2svn.sh [--run]
           Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to handle deleted files.
           When the staging folder (created by the svn2stage command) is ready, stage2svn can be called to create the svn command to add/delete files. Existing files that were changed will be discovered by svn itself. Before calling stage2svn it is advisable to call fix-symlinks, stage2svn will not accept new symlinks.
           Keep in mind that stage2svn command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually run the svn commands and then manually commit the changes to svn.

    svn2stage:
        short: Refresh staging folder by checking out the latest svn revision and copying the files to staging folder (admin command)
        long: |
            Usage: instl svn2stage --config-file config-file --out svn2stage.sh [--run]
            Making changes to the svn repository cannot be done on the svn checkout folder directly, mainly because svn finds it difficult to handle deleted files. svn2stage will checkout the latest revision to the svn folder (variable: SVN_CHECKOUT_FOLDER), and export the revision's files to the staging folder (variable: STAGING_FOLDER). Now changes to the staging folder can be made. When the staging folder is ready, stage2svn can be called to create the svn command to add/delete files
            Keep in mind that svn2stage command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually run the svn and copy commands.

    sync:
        short: Download files (client command)
        long: |
            Usage: instl sync --in instl-config-yaml-file --out sync.sh [--run]
            instl's sync command will create a batch file containing instructions to download required files. Said files can be later copied to their final destination using the copy command. Definition of what to sync from what url is taken from the instl-config-yaml-file.
            Keep in mind that sync command does not actually download anything, unless the --run flag is given. You will need to run the produced batch file in order to actually download the files.

    synccopy:
        short: Download files and copy them to their destination (client command)
        long: |
            Usage: instl synccopy --in instl-config-yaml-file --out synccopy.sh [--run]
            instl's synccopy combines the actions of the sync and copy commands. The created batch file will download the required files and copy them to the designated locations on disk. Definition of what to sync from what url and what to copy to which destination is taken from the instl-config-yaml-file
            Keep in mind that synccopy command does not actually download or copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually download and install the files.

    trans:
        short: Translates between the various format of svn info files (admin command)
        long:  |
            Usage: instl trans --in svn_info_file [--props svn_props_file] [--filter-in version_to_filter_in]
            instl's trans command can translate between the format created by svn info command and the native instl info format. Additional input that can be given is the output of the svn proplist command. trans also has limited filtering options.
            trans command is used in the output of create-links command.

    translate_url:
        short: Translates to canonical form according to the current connection (utility command)
        long:  |
            Usage: instl translate_url --in url_to_translate [--credentials s3:ACCESS_KEY:SECRET_KEY:BUCKET]
            instl's translate_url translate a url so it can be passed to a browser or download utility such as curl.
            If no --credentials is given, the translation will simply replace characters to ascii and spaces to %20.
            If --credentials is given instl will connect and build a url suitable for use. Currently only Amazon s3 connection is supported.

    test-import:
        short: Test that python imports inside instl are successful (utility command)
        long:   |
            Usage: instl test-import
            Helps making sure instl will function OK by trying out various import statements that instl uses. Especially useful after compiling instl in making sure the compiled binrary can find all the necessary imports.
            If all imports are OK, no message is written to stdout (except command timing statistics) and exit code is 0. In case of error a list of missing modules is printed and non-zero exit code is returned.

    uninstall:
        short: Remove installed files considering dependencies (client command)
        long: |
            Usage: instl uninstall --in instl-config-yaml-file --out uninstall.sh [--run]
            instl's uninstall command will create a batch file containing instructions to remove files from their designated locations on disk. Said files were previously copied using the copy command. Definition of what items to remove from which destination is taken from the instl-config-yaml-file. Default uninstall action for installed item is to erase the files from disk, but other instructions can be given in the instl-config-yaml-file. Items and their dependecies are removed only if they are not needed by other items that remain installed.
            Keep in mind that uninstall command does not actually copy anything, unless the --run flag is given. You will need to run the produced batch file in order to actually uninstall the files.

    unwtar:
        short: Combines split wtar files and uncompresses wtar files (utility command)
        long: |
            Usage: instl unwtar [--in file-or-folder] [--out] [--no-artifacts]
            Files who's extension is in the format '*.wtar.aa' are being read as one without being combined first.
            Files who's extension is in the format '*.wtar' are untared to their directory.
            If --no-artifacts option is given in all .wtar.??, .wtar and .done files are removed.
            If --in option is given, unwtar acts on the given file or folder. Otherwise it will work on the currect direcotry. Working on direcotries is recursive.
            If --out option is given, unwtar extracts into this folder. Otherwise it will extract into the current direcotry.
            unwtar command is used in the batch file created by the sync or synccopy commands.

    up-repo-rev:
        short: Upload a file containing basic information about uploaded repository (admin command)
        long: |
            Usage: instl up-repo-rev --config-file config_file
            up-repo-rev will create a repo_rev file according to the information in the config file, and upload said repo_rev file to s3 bucket to a top level folder called 'admin'. The contents of the repo_rev file are a list of variables defined in the "REPO_REV_FILE_VARS" variable of the config file. Typically these variables would be: REPO_REV, REPO_TYPE, SYNC_BASE_URL.
            relevant variables:
                S3_BUCKET_NAME
                REPO_REV_FILE_BASE_NAME, REPO_REV_FILE_BASE_NAME, REPO_REV_FILE_VARS, REPO_TYPE, REPO_REV, REPO_NAME

    up2s3:
        short: Upload a whole revision from SVN to s3 (admin command)
        long: |
            Usage: instl up2s3 --config-file config_file [--out ....] [--run]
            u2s3 will checout the repo-rev as specified in the confile-file, create all the info_map files and others and upload the whole thing
            to s3.
            Keep in mind that up2s3 command does not actually do anything, unless the --run flag is given. You will need to run the produced batch file in order to actually create upload the links.

    verify-index:
        short: Reads an index file and report discrepancies (admin command)
        long: |
            Usage: instl verify-index --in path-to-input-file
            path-to-input-file is a instl yaml file, verify-index will check it's index parts for missing sources, dependency and inheritance cycles.

    verify-repo:
        short: Scans the stage folder and the index file and report discrepancies (admin command)
        long: |
            Usage: instl verify-index --config-file config_file
            Report any sources specified in index.yaml that are missing from the file system using the folder in variable STAGING_FOLDER.
            Also check and reposrt dependency and inheritance cycles.
            Used to check repossitory consistancy before running stage2svn.

    version:
        short: Prints the instl version
        long: |
            Usage: instl version

    win-shortcut:
        short: Creates a Windows shortcut (utility command)
        long: |
            Usage: instl win-shortcut --shortcut in-path-to-shortcut --target in-path-to-target --run-as-admin
            Creates a windows shortcut in the path specified by in-path-to-shortcut (run-as-admin is optional). in-path-to-shortcut must end with .lnk.
            in-path-to-target is what the shortcut will lead to. run-as-admin is set up RanAsAdmin flag.
            The "Starts in" section of the shortcut is set to the parent folder of in-path-to-target.

    wtar:
        short: Compress files and folders to a .wtar file (admin command)
        long: |
            Files to compress are decided according to a regex given in the config file (variable: WTAR_REGEX).

variable:
    SYNC_BASE_URL:
        short: url used as the prefix for creating the full url to download installation files

option:
    in:
        short: -i, --in input_file.
        long: input_file is yaml file with variable and index definitions that configure what a command does. Typically the input_file will also contain __include__ statements to get further variable and index definitions from a remore or local file.
    out:
        short: -o, --out output_file. *option_in
        long: |
            output_file is a batch file created by instl with instructions that implement the command it was created for, according to the input file given with the --in option.
            Specifying an output_file does not actually run the file, unless the --run option is given.
    run:
        short: -r, --run
        long: |
            for commands the accept --out  option Specifying --run will also run the out_put file.
